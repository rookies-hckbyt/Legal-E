import React, { useState, useRef, useCallback, DragEvent, ChangeEvent } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Upload, 
  FileText, 
  Download, 
  Loader, 
  CheckCircle, 
  AlertCircle, 
  X 
} from 'lucide-react';

// Enhanced type definitions
type FileType = File & { preview?: string };

interface FileInfo {
  name: string;
  size: number;
  type: string;
}

enum ProcessingStatus {
  Idle = 'idle',
  Uploading = 'uploading',
  Processing = 'processing',
  Completed = 'completed',
  Error = 'error'
}

// Utility functions
const formatFileSize = (bytes: number): string => {
  const units = ['B', 'KB', 'MB', 'GB'];
  let size = bytes;
  let unitIndex = 0;

  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }

  return `${size.toFixed(1)} ${units[unitIndex]}`;
};

const TranscriptSummarizer: React.FC = () => {
  // State management with enhanced typing
  const [file, setFile] = useState<FileType | null>(null);
  const [fileInfo, setFileInfo] = useState<FileInfo | null>(null);
  const [status, setStatus] = useState<ProcessingStatus>(ProcessingStatus.Idle);
  const [summary, setSummary] = useState<string>('');
  const [progress, setProgress] = useState<number>(0);
  const [errorMessage, setErrorMessage] = useState<string>('');

  // Refs with explicit typing
  const fileInputRef = useRef<HTMLInputElement>(null);

  // File handling methods with improved type safety
  const handleFileSelection = useCallback((selectedFile: File) => {
    const typedFile = selectedFile as FileType;
    typedFile.preview = URL.createObjectURL(selectedFile);

    setFile(typedFile);
    setFileInfo({
      name: selectedFile.name,
      size: selectedFile.size,
      type: selectedFile.type
    });
    setStatus(ProcessingStatus.Idle);
    setSummary('');
    setErrorMessage('');
  }, []);

  const handleFileChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      handleFileSelection(selectedFile);
    }
  }, [handleFileSelection]);

  const handleDragOver = useCallback((e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const handleDrop = useCallback((e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    const droppedFile = e.dataTransfer.files[0];
    if (droppedFile) {
      handleFileSelection(droppedFile);
    }
  }, [handleFileSelection]);

  const removeFile = useCallback(() => {
    if (file?.preview) {
      URL.revokeObjectURL(file.preview);
    }
    
    setFile(null);
    setFileInfo(null);
    setStatus(ProcessingStatus.Idle);
    setSummary('');
    setErrorMessage('');
    
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  }, [file]);

  const processFile = async () => {
    if (!file) return;

    try {
      // Reset previous states
      setStatus(ProcessingStatus.Uploading);
      setProgress(0);
      setErrorMessage('');

      // Simulated upload progress
      const uploadSimulation = () => new Promise<void>((resolve) => {
        let currentProgress = 0;
        const interval = setInterval(() => {
          currentProgress += 20;
          setProgress(currentProgress);
          
          if (currentProgress >= 100) {
            clearInterval(interval);
            resolve();
          }
        }, 300);
      });

      await uploadSimulation();

      // Simulating processing
      setStatus(ProcessingStatus.Processing);
      await new Promise(resolve => setTimeout(resolve, 2500));

      // Simulated summary generation
      setStatus(ProcessingStatus.Completed);
      setSummary("This is an advanced AI-generated summary of your transcript. In a real-world application, this would be a comprehensive, context-aware summary generated by a sophisticated language model, capturing key points, themes, and nuanced insights from the original document.");
    
    } catch (error) {
      setStatus(ProcessingStatus.Error);
      setErrorMessage('File processing failed. Please try again.');
      console.error(error);
    }
  };

  const downloadSummary = useCallback(() => {
    const blob = new Blob([summary], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `transcript_summary_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [summary]);

  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="flex items-center justify-center min-h-screen p-4 bg-gradient-to-b from-background to-secondary/10"
    >
      <motion.div 
        layout
        className="bg-white rounded-xl shadow-2xl w-[80%] h-[75vh] flex flex-col overflow-hidden"
      >
        {/* Header */}
        <motion.div 
          initial={{ y: -50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          className="flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50"
        >
          <div>
            <h1 className="flex items-center space-x-2 text-3xl font-bold text-primary">
              <FileText className="w-8 h-8 text-primary" />
              <span>Transcript Summarizer</span>
            </h1>
            <p className="mt-2 text-gray-600">Upload your transcript and get an AI-powered summary.</p>
          </div>
        </motion.div>

        {/* Content Area */}
        <div className="flex flex-col items-center justify-center flex-1 p-6">
          <AnimatePresence>
            {!file && (
              <motion.div
                key="file-upload"
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.3 }}
                className="flex flex-col items-center justify-center w-full h-64 transition-colors duration-200 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer hover:border-primary"
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                onClick={() => fileInputRef.current?.click()}
              >
                <Upload className="w-12 h-12 mb-4 text-gray-400" />
                <p className="mb-2 text-gray-600">Drag and drop your transcript file here</p>
                <p className="text-sm text-gray-400">or</p>
                <motion.button 
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="px-4 py-2 mt-2 text-white transition-colors duration-200 rounded-md bg-primary hover:bg-primary-dark"
                >
                  Select File
                </motion.button>
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleFileChange}
                  className="hidden"
                  accept=".txt,.pdf,.doc,.docx"
                />
              </motion.div>
            )}

            {file && fileInfo && (
              <motion.div 
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
                className="w-full"
              >
                {/* File Details */}
                <div className="flex items-center justify-between p-4 mb-4 bg-gray-100 rounded-lg">
                  <div className="flex items-center space-x-4">
                    <FileText className="w-8 h-8 text-primary" />
                    <div>
                      <p className="font-medium">{fileInfo.name}</p>
                      <p className="text-sm text-gray-500">{formatFileSize(fileInfo.size)}</p>
                    </div>
                  </div>
                  <motion.button 
                    whileHover={{ rotate: 90 }}
                    onClick={removeFile} 
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <X className="w-6 h-6" />
                  </motion.button>
                </div>

                {/* Status-based Rendering */}
                <AnimatePresence mode="wait">
                  {status === ProcessingStatus.Idle && (
                    <motion.button
                      key="summarize-button"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      onClick={processFile}
                      className="w-full py-3 text-white transition-colors duration-200 rounded-md bg-primary hover:bg-primary-dark"
                    >
                      Summarize Transcript
                    </motion.button>
                  )}

                  {(status === ProcessingStatus.Uploading || status === ProcessingStatus.Processing) && (
                    <motion.div
                      key="loading-state"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      className="w-full"
                    >
                      <div className="flex items-center justify-center mb-2 space-x-2 text-primary">
                        <Loader className="w-6 h-6 animate-spin" />
                        <span>{status === ProcessingStatus.Uploading ? 'Uploading...' : 'Processing...'}</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2.5">
                        <div 
                          className="bg-primary h-2.5 rounded-full transition-all duration-500" 
                          style={{ width: `${progress}%` }}
                        />
                      </div>
                    </motion.div>
                  )}

                  {status === ProcessingStatus.Completed && (
                    <motion.div
                      key="summary-result"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="space-y-4"
                    >
                      <div className="flex items-center justify-center space-x-2 text-green-500">
                        <CheckCircle className="w-6 h-6" />
                        <span>Summary Generated</span>
                      </div>
                      <div className="p-4 overflow-y-auto bg-gray-100 rounded-lg max-h-48">
                        <p className="text-gray-800">{summary}</p>
                      </div>
                      <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={downloadSummary}
                        className="flex items-center justify-center w-full py-3 space-x-2 text-white transition-colors duration-200 rounded-md bg-primary hover:bg-primary-dark"
                      >
                        <Download className="w-5 h-5" />
                        <span>Download Summary</span>
                      </motion.button>
                    </motion.div>
                  )}

                  {status === ProcessingStatus.Error && (
                    <motion.div
                      key="error-state"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="flex items-center justify-center space-x-2 text-red-500"
                    >
                      <AlertCircle className="w-6 h-6" />
                      <span>{errorMessage}</span>
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default TranscriptSummarizer;